import requests
import json
from datetime import datetime

def updateSO(s, op, status, res):
    now = datetime.now()
    action = {
        'operation': op,
        'status': status,
        'time': now.strftime("%m/%d/%Y, %H:%M:%S"),
        'resp': res
    }
    updatedS = s['log'].append(action)
    return updatedS

def createVoltSession(token, tenantName):
    now = datetime.now()
    apiToken = "APIToken {0}".format(token)
    s = requests.Session()
    s.headers.update({'Authorization': apiToken})
    urlBase = "https://{0}.console.ves.volterra.io".format(tenantName)
    userCache = {'expiry': "Not Implemented", 'tenantUsers': []}
    step = {
        'operation': 'createVoltSession',
        'status': 'success',
        'time': now.strftime("%m/%d/%Y, %H:%M:%S"),
        'resp': None
    }
    actions = [step]
    session = {'session': s, 'urlBase': urlBase, 'userCache': userCache, 'log': actions}
    return session

def checkNS(email, s):
    userNS = email.split('@')[0].replace('.', '-').lower()
    url = s['urlBase'] + "/api/web/namespaces/{0}".format(userNS)
    try:
        resp = s['session'].get(url)
        if 200 <= resp.status_code <= 299:
            return updateSO(s, 'checkNS', 'present', resp.json())
        else:
            return updateSO(s, 'checkNS', 'absent', resp.json())
    except requests.exceptions.RequestException as e:  
        return None

def checkUser(email, s):
    url = s['urlBase'] + "/api/web/custom/namespaces/system/user_roles"
    #Has the userCache been populated?
    if len(s['userCache']['tenantUsers']) < 1:
        try:
            resp = s['session'].get(url)
            resp.raise_for_status()
            users = json.loads(resp.text)['items']
        except requests.exceptions.RequestException as e:  
            return updateSO(s, 'checkUser', 'HTTPerror', e)
        except json.decoder.JSONDecodeError as e:
            return updateSO(s, 'checkUser', 'JSONerror', e)
        s['userCache']['tenantUsers'] = users
    thisUser = next((user for user in s['userCache']['tenantUsers'] if user['email'].lower() == email.lower()), None)
    if thisUser:
        return updateSO(s, 'checkUser', 'present', thisUser)
    return updateSO(s, 'checkUser', 'absent', None)

def createUserNS(email, s):
    url = s['urlBase'] + "/api/web/namespaces"
    userNS = email.split('@')[0].replace('.', '-').lower()
    nsPayload = {
    'metadata': 
        {
            'annotations': {}, 
            'description': 'automatically generated by tenant admin', 
            'disable': False, 
            'labels': {}, 
            'name': userNS, 
            'namespace': ''
        }, 
        'spec': {}
    }
    try:
        resp = s['session'].post(url, json=nsPayload)
        resp.raise_for_status()
        return updateSO(s, 'createUserNS', 'success', resp.json())
    except requests.exceptions.RequestException as e:  
        return None

def delUserNS(email, s):
    userNS = email.split('@')[0].replace('.', '-').lower()
    url = s['urlBase'] + "/api/web/namespaces/{0}/cascade_delete".format(userNS)
    nsPayload = {
        "name": userNS
    }
    try:
        resp = s['session'].post(url, json=nsPayload)
        resp.raise_for_status()
        return updateSO(s, 'delUserNS', 'success', resp.json()) 
    except requests.exceptions.RequestException as e:  
        return None

def createUserRoles(email, first_name, last_name, s, createdNS=None, exists=False):
    url = s['urlBase'] + "/api/web/custom/namespaces/system/user_roles"
    userPayload = {
        'email': email, 
        'first_name': first_name, 
        'last_name': last_name, 
        'name': email, 
        'idm_type': 'SSO', 
        'namespace': 'system', 
        'namespace_roles': 
            [
                {'namespace': 'system', 'role': 'ves-io-power-developer-role'}, 
                {'namespace': 'system', 'role': 'f5-demo-infra-write'},
                {'namespace': '*', 'role': 'ves-io-monitor-role'}, 
                {'namespace': 'default', 'role': 'ves-io-power-developer-role'}, 
                {'namespace': 'shared', 'role': 'ves-io-power-developer-role'} 
            ], 
            'type': 'USER'
    }
    if createdNS:
        userPayload['namespace_roles'].append({'namespace': createdNS, 'role': 'ves-io-admin-role'})
    try:
        if exists:
            resp = s['session'].put(url, json=userPayload)
        else:
            resp = s['session'].post(url, json=userPayload)
        resp.raise_for_status()
        return updateSO(s, 'createUserRoles', 'success', resp.json())
    except requests.exceptions.RequestException as e:  
        return None

def delUser(email, s):
    url = s['urlBase'] + "/api/web/custom/namespaces/system/users/cascade_delete"
    userPayload = {
        "email": email,
        "namespace": "system"
    }
    try:
        resp = s['session'].post(url, json=userPayload)
        resp.raise_for_status()
        return updateSO(s, 'delUser', 'success', resp.json())
    except requests.exceptions.RequestException as e:  
        return None

def cliAdd(token, tenant, email, first_name, last_name, createNS, oRide):
    createdNS = None
    s = createVoltSession(token, tenant)
    if oRide:
        if createNS:
            s = checkNS(email,s) 
            if s['log'][-1]['status'] == 'present':                             #Is the NS present?
                s = delUserNS(email, s)                                         #Delete the NS (and everything inside)
            s = createUserNS(email, s)                                          #Create the NS
            createdNS = s['log'][-1]['resp']['metadata']['name']                #TBD: More robust -- check for success
        s = createUserRoles(email, first_name, last_name, s, createdNS, True)   #Create the user with her roles
        return {'status': 'success', 'log': s['log']}
    else:
        if createNS:
            s = checkNS(email,s)
            if s['log'][-1]['status'] == 'present':                                             #Is the NS present?
                return {'status': 'failure', 'reason': 'NS already exists', 'log': s['log']}    #No oRide -- this is fatal
            else:   
                s = createUserNS(email, s)                                                      #Create the NS
                createdNS = s['log'][-1]['resp']['metadata']['name']                            #TBD: more robust
        s = checkUser(email, s)                                                                 #Is the user present?
        if s['log'][-1]['status'] == 'present':                                                 #User is present
            return {'status': 'failure', 'reason': 'User already exists', 'log': s['log']}      #No oRide -- this is fatal
        else:
            s = createUserRoles(email, first_name, last_name, s, createdNS)                     #Create the user
            return {'status': 'success', 'log': s['logs']}
 

def cliRemove(token, tenant, email):
    s = createVoltSession(token, tenant)
    s = delUserNS(email, s)
    s = delUser(email, s)
    return {'status': 'success', 'log': s['log']}

