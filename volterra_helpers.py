import logging
import requests


logging.getLogger("volterra-helper").setLevel(logging.INFO)

def createUserNamespace(email, tenantName, token):
    url = "https://{0}.console.ves.volterra.io/api/web/namespaces".format(tenantName)
    apiToken = "APIToken {0}".format(token)
    s = requests.Session()
    s.headers.update({'Authorization': apiToken})

    userNS = email.split('@')[0].replace('.', '-').lower()
    nsPayload = {
    'metadata': 
        {
            'annotations': {}, 
            'description': 'automatically generated by tenant admin', 
            'disable': False, 
            'labels': {}, 
            'name': userNS, 
            'namespace': ''
        }, 
        'spec': {}
    }

    try:
        resp = s.post(url, json=nsPayload)
        resp.raise_for_status()
        logging.info("Namespace {0} created in the {1} tenant.".format(userNS, tenantName))
        return True
    except requests.exceptions.RequestException as e:  
        logging.error("Http Error: {0}".format(e))
        return None

def createUserRoles(email, first_name, last_name, tenantName, token, createdNS=None):
    url = "https://{0}.console.ves.volterra.io/api/web/custom/namespaces/system/user_roles".format(tenantName)
    apiToken = "APIToken {0}".format(token)
    s = requests.Session()
    s.headers.update({'Authorization': apiToken})

    userPayload = {
        'email': email, 
        'first_name': first_name, 
        'last_name': last_name, 
        'name': email, 
        'idm_type': 'SSO', 
        'namespace': 'system', 
        'namespace_roles': 
            [
                {'namespace': 'system', 'role': 'ves-io-power-developer-role'}, 
                {'namespace': '*', 'role': 'ves-io-monitor-role'}, 
                {'namespace': 'default', 'role': 'ves-io-power-developer-role'}, 
                {'namespace': 'shared', 'role': 'ves-io-power-developer-role'} 
            ], 
            'type': 'USER'
    }

    if createdNS in locals():
        userPayload['namespace_roles'].append({'namespace': createdNS, 'role': 'ves-io-admin-role'})

    try:
        resp = s.post(url, json=userPayload)
        resp.raise_for_status()
        logging.info("User {0} created with appropriate roles.".format(email))
        return True
    except requests.exceptions.RequestException as e:  
        logging.error("Http Error: {0}".format(e))
        return None